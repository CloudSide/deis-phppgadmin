#!/usr/bin/env bash
#
# This script is designed to be run inside the container
#

# fail hard and fast even on pipelines
set -eo pipefail

# set debug based on envvar
[[ $DEBUG ]] && set -x

# configure etcd
export ETCD_PORT="${ETCD_PORT:-4001}"
export ETCD="$HOST:$ETCD_PORT"
export ETCD_PATH="${ETCD_PATH:-/deis/phppgadmin}"
export ETCD_TTL="${ETCD_TTL:-20}"

# wait for etcd to be available
until etcdctl --no-sync -C "$ETCD" ls >/dev/null 2>&1; do
  echo "phppgadmin: waiting for etcd at $ETCD..."
  sleep $((ETCD_TTL/2))  # sleep for half the TTL
done

# wait until etcd has discarded potentially stale values
sleep $((ETCD_TTL+1))


# wait for confd to run once and install initial templates
until confd -onetime -node "$ETCD" -confdir /data --log-level error; do
  echo "phppgadmin: waiting for confd to write initial templates..."
  sleep $((ETCD_TTL/2))  # sleep for half the TTL
done


# spawn confd in the background to update services based on etcd changes
confd -node "$ETCD" -confdir /data --log-level error --interval 5 &



# publish the service to etcd using the injected HOST and EXTERNAL_PORT
if [[ ! -z $EXTERNAL_PORT ]]; then
  # configure service discovery
  PORT=${PORT:-80}
  PROTO=${PROTO:-tcp}

  set +e

  # while the port is listening, publish to etcd
  while [[ ! -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PORT\" && \$1 ~ \"$PROTO.?\"") ]] ; do
    etcdctl --no-sync -C "$ETCD" set "$ETCD_PATH/host" "$HOST" --ttl "$ETCD_TTL" >/dev/null
    etcdctl --no-sync -C "$ETCD" set "$ETCD_PATH/port" "$EXTERNAL_PORT" --ttl "$ETCD_TTL" >/dev/null
    sleep $((ETCD_TTL/2)) # sleep for half the TTL
  done

  # if the loop quits, something went wrong
  exit 1

fi

wait
